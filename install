#!/bin/sh

locale=$(curl -s https://ipapi.co/languages | tr ',' '\n' | head -n 1)
# rfkill unblock 0
# rfkill unblock 1
# rfkill unblock 2
# rfkill unblock 3

function configurar_teclado_idioma() {
    echo "Configurando el teclado y el idioma"
    echo $locale >> locale.gen && locale-gen
    clear
    echo "El teclado y el idioma se han configurado correctamente"
    connect_to_internet
}

function connect_to_internet() {
    if ping -c1 8.8.8.8 &>/dev/null; then
        echo "Conexión a Internet: OK"
    else
        echo "No hay conexión a Internet"
        echo "Para conectarse a Internet, ejecuta: "
        echo "device list"
        echo "station wlan0 scan"
        echo "station wlan0 get-networks"
        echo "station wlan0 connect NOMBRE_RED"
        echo "station wlan0 connect-hidden NOMBRE_RED | En caso de que la red sea oculta"
        echo "y por último, exit"

        sleep 5
        echo "Presiona Enter para iniciar el proceso de conexión a Internet"
        read -r
        iwctl
    fi
    timedatectl
    particion_disco
}

function particion_disco() {
    disks=$(lsblk -dno NAME,SIZE | awk '{print $1, $2}')
    echo "Discos disponibles:"
    echo "$disks"
    read -p "Selecciona el disco a particionar: " disk_name
    (
        echo "g"; 
        echo "n"; 
        echo "1"; 
        echo ""; 
        echo "+512M"; 
        echo "t"
        echo "1"; 
        echo "n"; 
        echo "2"; 
        echo ""; 
        echo ""; 
        echo "w";
    ) | fdisk "/dev/$disk_name"
    clear
    echo "Particiones creadas:"
    lsblk "/dev/$disk_name"
    disk_formating "$disk_name"
}

function disk_formating() {

    local disk_name="$1"
    shift
    interface=$(lsblk -o NAME,TRAN | grep "^$disk_name " | awk '{print $2}')

    if [[ "$interface" == "sata" ]]; then
        mkfs.fat -F32 "/dev/${disk_name}1"
        encripting "$disk_name"
        # mkfs.ext4 "/dev/${disk_name}2"
    elif [[ "$interface" == "nvme" ]]; then
        mkfs.fat -F32 "/dev/${disk_name}p1"
        encripting "$disk_name"
        # mkfs.ext4 "/dev/${disk_name}p2"
    else
        echo "No se pudo determinar la interfaz de $disk_name."
fi

}

function encripting() {
    set -e  # Detener la ejecución si ocurre un error

    echo "Encriptando el disco"
    local disk_name="$1"

    if [[ -z "$disk_name" ]]; then
        echo "Error: No se ha especificado un disco."
        return 1
    fi

    read -s -p "Introduce la contraseña LUKS: " luks_pass
    echo
    read -s -p "Confirma la contraseña LUKS: " luks_pass_confirm
    echo

    if [[ "$luks_pass" != "$luks_pass_confirm" ]]; then
        echo "Error: Las contraseñas no coinciden."
        return 1
    fi

    echo "Confirmando y encriptando el disco..."
    echo -n "$luks_pass" | cryptsetup -y -v luksFormat /dev/"$disk_name" --key-file -

    cryptsetup open /dev/"$disk_name" cryptroot
    btrfs_partition "/dev/mapper/cryptroot"
}

function btrfs_partition() {

    echo "Formating btrfs"
    local disk_name="$1"
    shift
    mkfs.btrfs /dev/mapper/cryptroot
    mount $disk_name /mnt
    cd /mnt
    btrfs subvolume create @
    btrfs subvolume create @home
    btrfs subvolume create @snapshots
    btrfs subvolume create @var_log
    btrfs subvolume create @swap
    cd
    mount_partitions
}

function mount_partitions() {
    umount /mnt
    mount -o noatime,compress=zstd,space_cache=v2,subvol=@ /dev/mapper/cryptroot /mnt
    mkdir -p /mnt/{boot,home,.snapshots,var/log,swap}
    mount -o noatime,compress=zstd,space_cache=v2,subvol=@home /dev/mapper/cryptroot /mnt/home
    mount -o noatime,compress=zstd,space_cache=v2,subvol=@snapshots /dev/mapper/cryptroot /mnt/.snapshots
    mount -o noatime,compress=zstd,space_cache=v2,subvol=@var_log /dev/mapper/cryptroot /mnt/var/log
    mount -o noatime,subvol=@swap /dev/mapper/cryptroot /mnt/swap
    mount /dev/nvme0n1p1 /mnt/boot
    cd /mnt/swap
    btrfs filesystem mkswapfile --size 4g --uuid clear ./swapfile
    swapon ./swapfile
    cd
    instalar_sistema
}

function instalar_sistema() {
    intel-ucode
    pacstrap /mnt base linux-zen linux-zen-headers linux-firmware btrfs-progs efibootmgr grub os-prober networkmanager openssh sudo dhcpcd base-devel zsh zsh-completions vim git curl wget man-db man-pages dosfstools e2fsprogs exfat-utils ntfs-3g smartmontools dialog man-db man-pages texinfo pacman-contrib snapper xdg-user-dirs xdg-utils tlp reflector neofetch

    genfstab -U /mnt >> /mnt/etc/fstab
}
    
function show_main_menu() {
    clear
    echo "===== Arch Linux Installer ====="
    echo
    echo "1. Particionar el disco"
    echo "2. Instalar el sistema base"
    echo "3. Configurar la red"
    echo "5. Crear usuario"
    echo "6. Configurar el sistema"
    echo "7. Salir"
    echo -n "Selecciona una opción: "
    read -r option
    case $option in
        1) particion_disco ;;
        2) instalar_sistema ;;
        3) configurar_red ;;
        4) crear_usuario ;;
        5) configurar_sistema ;;
        6) exit 0 ;;
        *) echo "Opción inválida. Presiona Enter para continuar." && read -r && show_main_menu ;;
    esac
}


# Función para configurar la red
function configurar_red() {
    source "$(pwd)/modules/networking.sh"
    configurar_red
    show_main_menu
}

# Función para crear el usuario
function crear_usuario() {
    source "$(pwd)/modules/user.sh"
    crear_usuario
    show_main_menu
}

# Función para configurar el sistema
function configurar_sistema() {
    source "$(pwd)/modules/system.sh"
    configurar_sistema
    show_main_menu
}

# Función para crear un dual-boot
function crear_dual_boot() {
    source "$(pwd)/modules/partitioning.sh"
    crear_dual_boot
    show_main_menu
}

configurar_teclado_idioma
connect_to_internet
